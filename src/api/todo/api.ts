/* tslint:disable */
/* eslint-disable */
/**
 * Shopping API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BuyShoppingOutput
 */
export interface BuyShoppingOutput {
    /**
     * 
     * @type {string}
     * @memberof BuyShoppingOutput
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CartDto
 */
export interface CartDto {
    /**
     * 
     * @type {string}
     * @memberof CartDto
     */
    'shoppingId': string;
}
/**
 * 
 * @export
 * @interface CartItemDto
 */
export interface CartItemDto {
    /**
     * 
     * @type {ShoppingOutput}
     * @memberof CartItemDto
     */
    'shoppingId': ShoppingOutput;
    /**
     * 
     * @type {number}
     * @memberof CartItemDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CartOutputDto
 */
export interface CartOutputDto {
    /**
     * 
     * @type {string}
     * @memberof CartOutputDto
     */
    'userId': string;
    /**
     * 
     * @type {Array<CartItemDto>}
     * @memberof CartOutputDto
     */
    'items': Array<CartItemDto>;
}
/**
 * 
 * @export
 * @interface CreateUserInputDto
 */
export interface CreateUserInputDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserInputDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInputDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateUserOutputDto
 */
export interface CreateUserOutputDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutputDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserOutputDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface LoginInputDto
 */
export interface LoginInputDto {
    /**
     * 
     * @type {string}
     * @memberof LoginInputDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginInputDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginUserOutputDto
 */
export interface LoginUserOutputDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserOutputDto
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserOutputDto
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface ShoppingOutput
 */
export interface ShoppingOutput {
    /**
     * 
     * @type {string}
     * @memberof ShoppingOutput
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ShoppingOutput
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ShoppingOutput
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof ShoppingOutput
     */
    'image': string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginInputDto} loginInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginInputDto: LoginInputDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginInputDto' is not null or undefined
            assertParamExists('login', 'loginInputDto', loginInputDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginInputDto} loginInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginInputDto: LoginInputDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInputDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: AuthenticationApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginUserOutputDto> {
            return localVarFp.login(requestParameters.loginInputDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginRequest
 */
export interface AuthenticationApiLoginRequest {
    /**
     * 
     * @type {LoginInputDto}
     * @memberof AuthenticationApiLogin
     */
    readonly loginInputDto: LoginInputDto
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(requestParameters: AuthenticationApiLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).login(requestParameters.loginInputDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCart: async (cartDto: CartDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartDto' is not null or undefined
            assertParamExists('addToCart', 'cartDto', cartDto)
            const localVarPath = `/cart/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decrementCartItem: async (cartDto: CartDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartDto' is not null or undefined
            assertParamExists('decrementCartItem', 'cartDto', cartDto)
            const localVarPath = `/cart/decrement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementCartItem: async (cartDto: CartDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartDto' is not null or undefined
            assertParamExists('incrementCartItem', 'cartDto', cartDto)
            const localVarPath = `/cart/increment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCart: async (cartDto: CartDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartDto' is not null or undefined
            assertParamExists('removeFromCart', 'cartDto', cartDto)
            const localVarPath = `/cart/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCart(cartDto: CartDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCart(cartDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.addToCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.clearCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decrementCartItem(cartDto: CartDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.decrementCartItem(cartDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.decrementCartItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.getCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incrementCartItem(cartDto: CartDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incrementCartItem(cartDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.incrementCartItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CartDto} cartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromCart(cartDto: CartDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromCart(cartDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.removeFromCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @param {CartApiAddToCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCart(requestParameters: CartApiAddToCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<CartOutputDto> {
            return localVarFp.addToCart(requestParameters.cartDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clearCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CartApiDecrementCartItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decrementCartItem(requestParameters: CartApiDecrementCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<CartOutputDto> {
            return localVarFp.decrementCartItem(requestParameters.cartDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options?: RawAxiosRequestConfig): AxiosPromise<CartOutputDto> {
            return localVarFp.getCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CartApiIncrementCartItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementCartItem(requestParameters: CartApiIncrementCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<CartOutputDto> {
            return localVarFp.incrementCartItem(requestParameters.cartDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CartApiRemoveFromCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCart(requestParameters: CartApiRemoveFromCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<CartOutputDto> {
            return localVarFp.removeFromCart(requestParameters.cartDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToCart operation in CartApi.
 * @export
 * @interface CartApiAddToCartRequest
 */
export interface CartApiAddToCartRequest {
    /**
     * 
     * @type {CartDto}
     * @memberof CartApiAddToCart
     */
    readonly cartDto: CartDto
}

/**
 * Request parameters for decrementCartItem operation in CartApi.
 * @export
 * @interface CartApiDecrementCartItemRequest
 */
export interface CartApiDecrementCartItemRequest {
    /**
     * 
     * @type {CartDto}
     * @memberof CartApiDecrementCartItem
     */
    readonly cartDto: CartDto
}

/**
 * Request parameters for incrementCartItem operation in CartApi.
 * @export
 * @interface CartApiIncrementCartItemRequest
 */
export interface CartApiIncrementCartItemRequest {
    /**
     * 
     * @type {CartDto}
     * @memberof CartApiIncrementCartItem
     */
    readonly cartDto: CartDto
}

/**
 * Request parameters for removeFromCart operation in CartApi.
 * @export
 * @interface CartApiRemoveFromCartRequest
 */
export interface CartApiRemoveFromCartRequest {
    /**
     * 
     * @type {CartDto}
     * @memberof CartApiRemoveFromCart
     */
    readonly cartDto: CartDto
}

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @param {CartApiAddToCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public addToCart(requestParameters: CartApiAddToCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).addToCart(requestParameters.cartDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public clearCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).clearCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CartApiDecrementCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public decrementCartItem(requestParameters: CartApiDecrementCartItemRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).decrementCartItem(requestParameters.cartDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public getCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).getCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CartApiIncrementCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public incrementCartItem(requestParameters: CartApiIncrementCartItemRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).incrementCartItem(requestParameters.cartDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CartApiRemoveFromCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public removeFromCart(requestParameters: CartApiRemoveFromCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).removeFromCart(requestParameters.cartDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShoppingApi - axios parameter creator
 * @export
 */
export const ShoppingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shopping/buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shopping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOne', 'id', id)
            const localVarPath = `/shopping/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingApi - functional programming interface
 * @export
 */
export const ShoppingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuyShoppingOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buy(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingApi.buy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShoppingOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingApi.findAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShoppingApi.findOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShoppingApi - factory interface
 * @export
 */
export const ShoppingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buy(options?: RawAxiosRequestConfig): AxiosPromise<BuyShoppingOutput> {
            return localVarFp.buy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<ShoppingOutput>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShoppingApiFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(requestParameters: ShoppingApiFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShoppingOutput> {
            return localVarFp.findOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findOne operation in ShoppingApi.
 * @export
 * @interface ShoppingApiFindOneRequest
 */
export interface ShoppingApiFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof ShoppingApiFindOne
     */
    readonly id: string
}

/**
 * ShoppingApi - object-oriented interface
 * @export
 * @class ShoppingApi
 * @extends {BaseAPI}
 */
export class ShoppingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingApi
     */
    public buy(options?: RawAxiosRequestConfig) {
        return ShoppingApiFp(this.configuration).buy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingApi
     */
    public findAll(options?: RawAxiosRequestConfig) {
        return ShoppingApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingApiFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingApi
     */
    public findOne(requestParameters: ShoppingApiFindOneRequest, options?: RawAxiosRequestConfig) {
        return ShoppingApiFp(this.configuration).findOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserInputDto} createUserInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (createUserInputDto: CreateUserInputDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserInputDto' is not null or undefined
            assertParamExists('register', 'createUserInputDto', createUserInputDto)
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserInputDto} createUserInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(createUserInputDto: CreateUserInputDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(createUserInputDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UsersApiRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(requestParameters: UsersApiRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUserOutputDto> {
            return localVarFp.register(requestParameters.createUserInputDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for register operation in UsersApi.
 * @export
 * @interface UsersApiRegisterRequest
 */
export interface UsersApiRegisterRequest {
    /**
     * 
     * @type {CreateUserInputDto}
     * @memberof UsersApiRegister
     */
    readonly createUserInputDto: CreateUserInputDto
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public register(requestParameters: UsersApiRegisterRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).register(requestParameters.createUserInputDto, options).then((request) => request(this.axios, this.basePath));
    }
}



